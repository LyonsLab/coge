<script src="js/coge/wikifeed.js"></script>
<script src="js/coge/utils.js"></script>
<script src="js/vendor/plotly/dist/plotly.min.js"></script>
<script language="javascript">
$(document).ready(function(){
    var feed = new wikifeed("<tmpl_var name=wikifeed>", $("#wikifeed"));
    pageObj = new Object();
    pageObj.index=0;//Math.floor(Math.random()*20);

    var images = new Array(
        ["jbrowse-genome-view.png", "View your data in the new EPIC-CoGe browser built with JBrowse, including annotation, quantitative measurements, SNPs, and RNA-seq alignments!", "EPIC-CoGe"],
        ["500px-SynPlot-Chr1-At-v-Al.png","Syntenic dotplot of Arabidopsis thaliana versus Arabidopsis lyrata with synonymous mutations","Syntenic_comparison_of_Arabidopsis_thaliana_and_Arabidopsis_lyrata"],
        ["GenomeView-MG1655.png", "Visualizing a prophage insertion in E. coli K12 MG1655 by differences in genome structure", "Horizontal_Gene_Transfer"],
        ["Os-Sb-CNS-rich.png", "Syntenic MYB with many conserved non-coding-sequences(CNSs).  Purple were computationally predicted; pink with lines are emperically determined for proofing.", "CNS-rich_grass_MYB_gene"],
        ["600px-Maize-sorghum-cns.png", "Identifying fractionation and conserved non-coding sequences in maize and sorghum", "Maize_Sorghum_Syntenic_dotplot"],
        ["gevo-synteny.png", "High-resolution sequence analysis of syntenic regions of Arabidopsis derived from its most recent genome duplication event.", "Syntenic_comparison_of_Arabidopsis_thaliana_and_Arabidopsis_lyrata"],
        ["500px-3440_3441.CDS-CDS.blastn.dag_geneorder_D20_g10_A5.1-1.w800.png", "Shewanella baltica strains syntenic dotplot showing an x-alignment","X-alignment"],
        ["800px-Master_3068_8.CDS-CDS.blastn_geneorder_D20_g10_A5.w2000.ks.png","Syntenic dotplot of Arabidopsis thaliana vs lyrata","Syntenic_comparison_of_Arabidopsis_thaliana_and_Arabidopsis_lyrata"],
        ["Master_2361_2360.CDS-CDS.blastn_geneorder_D20_g10_A5.w500.png","Acidovorax syntenic dotplot showing an x-alignment","X-alignment"],
        ["600px-System_framework.png","CoGe's open-ended interconnected analysis network","CoGe_system_arcitecture"],
        ["600px-Syntenic_dotplot_medicago_truncatula_v2_vs_v3.png","Comparison of new and old genome assemblies of Medicago truncatula","Syntenic_dotplot_medicago_truncatula_version_3_versus_version_2"],
        ["800px-GenomeView_GEvo-links.png", "Visualizing variation in GC content and links for syntenic gene analyses", "GenomeView_examples#GEvo_Links"],

        ["500px-Reconstructingchromosomes.png", "Reconstruting maize chromosomes through syntenic dotplot comparisons to sorghum", "Splitting_maize_genome"],
        ["Grapevine-peach_K2_historgram.png","Historgram of synonymous mutation values between grape and peach","Syntenic_dotplot_of_peach_versus_grape"],
        //["k12-CDS-aa-usage.png","E. coli's amino acid usage as a function of CDS GC content","CodeOn"],
        ["600px-Plasmodium-codon-substitution-matirx.png", "Codon substitution matrix of two Plasmodia species","Plasmodia_comparative_genomics"],
        ["800px-Human-mouse-tandem-gene-duplication.png","Human-mouse syntenic comparison showing a conserved tandem gene cluster","Local_Gene_Duplication"],
        ["600px-SynPlot-Chr1-At-v-Al.png", "Synonymous mutation histogram of syntenic genes between two species of Arabidopsis showing orthologous pairs and those derived from a shared whole genome duplication event","Syntenic_comparison_of_Arabidopsis_thaliana_and_Arabidopsis_lyrata"],
        ["600px-CoGeBlast-At1g02120-eval.png", "CoGeBlast evaluating potential homologous hits", "Phylogenetics_in_CoGe#Evaluate_potential_homologs_in_CoGeBlast_and_select_the_.22good.22_ones"],
        ["Plasmodium_knowlesi_cds_gc_content_histogram.png", "GC content distribution for all protein sequences of a Plasmodium species","Plasmodia_comparative_genomics"],
        ["FeatMap-screenshot.png", "Identifying genomic distributions of gene families", "GenomeMap"],
        ["GEvo-ecoli-insertion-direct-repeats.png", "Identifying direct repeats flanking an insertion in E. coli", " Analysis_of_variations_found_in_genomes_of_Escherichia_coli_strain_K12_DH10B_and_strain_B_REL606_using_SynMap_and_GEvo_analysis#High-resolution_GEvo_analysis_of_an_insertion:_finding_direct_sequence_repeats"],
        ["800px-GeLo-nucleotides.png", "Visualizing individual nucleotides with GenomeView", "GenomeView_examples#Chromosome_Background"],
        ["600px-Phylogeny_fr_PhyML.png","Linking to phylogeny.fr for one-click phylogenetics","Phylogenetics_in_CoGe#Send_sequences_to_phylogeny.fr"]
    );

    var path = "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=PLX4g0G-7D3_BZrxXnrO_-W7Q12NjrDUBX&key=AIzaSyAH3DLaPmE8bYok1SylK_0Gv2CiRXkrHQs";

    images.forEach(function(value, index, list) {
        var im = new Image();
        im.src = "./picts/home_page/" + value[0];
        value[0] = im;
        return value;
    });

    getYoutubeVideos(path, function(videos) {
        var first = videos.shift();
        var list = coge.utils.shuffle(images.concat(videos));
        list.unshift(first);

        cross_fade("#crossfade", list, 1);
    });

    $("#genome_dialog").dialog({
        title: "Recently Added Public Genomes",
        width: 550,
        autoOpen: false,
        position: {
            my: "center",
            at: "bottom",
            of: $("#stats")
        },
        show: {
            effect: "fade",
            duration: 800
        }
    });

    get_latest_genomes(5).then(load_latest.bind(undefined, $("#latest-genomes")));

    plotResults("tmp/usage_data.csv", "usage-map");
});

function show_genomes(e) {
    if (e) e.preventDefault();
    $("#genome_dialog").dialog("open");

    var limit = $('#limit').val();
    var container = $("#genomes-list").slideUp().html("");
    get_latest_genomes(limit).then(load_latest.bind(undefined, container));
}

function getYoutubeVideos(path, callback) {
    var parseVideos = function(channel) {
        var entries = channel.items;
        var videos = [];

        for (var i=0; i< entries.length; i++) {
            var id = entries[i].snippet.resourceId.videoId;
            var title = entries[i].snippet.title;
            var thumbnail = entries[i].snippet.thumbnails.high.url;

            var src = 'https://www.youtube.com/embed/' + id
            + '?wmode=transparent&amp;HD=0&amp;rel=0&amp;showinfo=0&amp;'
            + 'controls=1&amp;fs=1&amp;autoplay=1';

            var vid = $('<iframe frameborder="0" allowfullscreen><iframe>')
                .attr("src", src);

            var overlay = $("<img class='overlay' src='picts/youtube-play-button.png'>")
                .css("width", "20%");

            var youtubeHack = $("<div id='youtube-hack' class='youtube-hack'></div>");

            var element = $('<img></img>', {"id": id, src: thumbnail})
                .css("width", "100%")
                .css("max-height", "45%");

            youtubeHack.append(element);
            youtubeHack.append(overlay);

            videos.push([youtubeHack, title, null, vid]);
        }

        callback(videos);
    }

    $.ajax({
        url: path,
        dataType: "json",
        success: parseVideos
    });
}

function cross_fade(selector, image, delay) {
    var element = $(selector),
        loop_timeout,
        index = 0,
        pause_time = 8000,
        fade_time = 1500
        paused = true;

    var run_button = $("<span>&#9208</span>")
            .addClass('link')
            .css("margin", "0 2%")
            .on("click", $.proxy(pause, this));

    var next_button = $("<span>&#x23ED;</span>")
            .addClass('link')
            .on("click", $.proxy(next, this));

    var prev_button = $("<span>&#x23EE;</span>")
            .addClass('link')
            .on("click", $.proxy(previous, this));

    var controls = $("<div></div>")
        .css("margin", "0px 0 10px 0")
        .css("text-align", "center")
        .append(prev_button)
        .append(run_button)
        .append(next_button);

    var viewer = $("<div></div>")
        .addClass("link")
        .css("text-align", "center")
        .css("padding", "5px");

    element.append(controls)
        .append(viewer)
        .show();

    function animate(duration) {
        var transition = function() {
            var elem = $(image[index][0])
                    .css("max-width", "100%")

            var wrapper = $("<div></div>")
                .append(elem);

            var description = $("<div></div>")
                .addClass("padded")
                .css("width", "80%")
                .css("margin", "0 auto")
                .css("float", "none")
                .text(image[index][1]);

            viewer.unbind();

            if(image[index].length === 4) {
                viewer.on("click", $.proxy(pause, run_button))
                    .on("click", function() { elem.replaceWith($(image[index][3]).css("width", "95%").css("height", "500px")); });
            } else {
                viewer.on("click", function() { window.open("https://genomevolution.org/wiki/index.php/"+image[index][2]); });
            }

            viewer.html("")
                .append(elem)
                .append(description)
                .fadeIn(duration);
        };

        viewer.fadeOut(duration, transition);
    }

    function loop() {
        index = (++index < image.length) ? index : 0;
        animate(fade_time);
        loop_timeout = setTimeout(loop, pause_time);
    }

    function next() {
        index = (++index < image.length) ? index : 0;

        if (!paused) {
            clearTimeout(loop_timeout);
            loop_timeout = setTimeout(loop, pause_time);
        }

        animate(0);
    }

    function previous() {
        index = (--index >= 0) ? index : image.length - 1;

        if (!paused) {
            clearTimeout(loop_timeout);
            loop_timeout = setTimeout(loop, pause_time);
        }

        animate(0);
    }

    function resume() {
        run_button
            .html('&#9208')
            .unbind()
            .on("click", $.proxy(pause, this));

        paused = false;
        animate(0);
        loop_timeout = setTimeout(loop, pause_time);
    }

    function pause() {
        paused = true;
        run_button
            .html('&#x23E9')
            .unbind()
            .on("click", $.proxy(resume, this));

        clearTimeout(loop_timeout);
        return this;
    }

    resume();
}

function load_latest(container, content) {
    var i, entry, name, wrapper, added;

    for(i = 0; i < content.length; i++) {
        wrapper = $("<div></div>");

        if (content[i].added === null)
            added = "Unknown"
        else
            added = new Date(content[i].added).toDateString();

        entry = $("<h4></h4>")
            .html(added)
            .css({"width": "10em", "color": "green"})
            .addClass("inline");

        name = $("<a></a>", { href: content[i].url, text: content[i].organism });
        name.addClass("inline");

        wrapper.append(entry).append(name);
        container.append(wrapper);
    }

    container.slideDown();
}

function get_latest_genomes(limit) {
    return $.getJSON("index.pl?fname=get_latest_genomes&limit="  + limit);
}

function plotResults(dataset, divID) {

    // Parses CSV data.
    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; })
    }

    // Create a trace, given a header and global maximum.
    function makeTrace(rows, max, header) {
        var c = unpack(rows, 'Country');
        var z = unpack(rows, header);
        var t = [];
        for (var i=0; i < c.length; i++) {
            t.push("<b>" + c[i] + "</b><br>" + z[i] + " sessions");
        }

        return {
            type: 'choropleth',
            locationmode: 'country names',
            locations: c,
            z: z,
            zmin: 0,
            zmax: max,
            hoverinfo: 'text',
            text: t,
            colorscale: [
                [0, '#E7F4E7'],          //0
                [1. / 10000, '#CFEACF'], //10
                [1. / 1000, '#B7E0B7'],  //100
                [1. / 100, '#9FD69F'],   //1000
                [1. / 10, '#88CC88'],    //10000
                [1., '#119911']          //100000
            ],
            showscale: false,
            visible: header == 'All'
        };
    }

    // Define buttons to change time period.
    var selectorOptions = [{
            method: 'restyle',
            args: ['visible', [true, false, false, false]],
            label: "All Time"
        }, {
            method: 'restyle',
            args: ['visible', [false, true, false, false]],
            label: "1 Year"
        }, {
            method: 'restyle',
            args: ['visible', [false, false, true, false]],
            label: "1 Month"
        }, {
            method: 'restyle',
            args: ['visible', [false, false, false, true]],
            label: "1 Week"
        }
    ];

    // Create plot.
    Plotly.d3.csv(dataset, function(err, rows) {
        // Calculate maximum sessions.
        var maximum = Math.max.apply(null, unpack(rows, "All").map(function(x) { return parseInt(x) }));
        // Create traces for each time period.
        var all_trace = makeTrace(rows, maximum, "All");
        var year_trace = makeTrace(rows, maximum, "Year");
        var month_trace = makeTrace(rows, maximum, "Month");
        var day_trace = makeTrace(rows, maximum, "Week");
        // Define data.
        var data = [all_trace, year_trace, month_trace, day_trace];
        // Define layout.
        var layout = {
            //showlegend: false,
            //autosize: true,
            width: $(window).width() * 0.45,
            height: ($(window).width() * 0.45) * (1/2),
            margin: {t: 0, b: 0, l: 0, r: 0, pad: 0},
            geo: {
                scope: 'world',
                projection: {
                    type: 'natural earth'
                },
                showland: true,
                showcountries: true,
                landcolor: 'rgb(217, 217, 217)',
                subunitwidth: 1,
                countrywidth: 1,
                subunitcolor: 'rgb(255,255,255)',
                countrycolor: '#7c7c7c'
            },
            updatemenus: [ {y: 1, yanchor: 'top', x: 0, xanchor: 'left', buttons: selectorOptions} ]
        };
        // Plot.
        Plotly.plot(divID, data, layout, {showLink: false, displayModeBar: false});

    });

    // Event listener for resize events.
    window.addEventListener('resize', function() {
        Plotly.relayout(divID, {width: $(window).width() * 0.45, height: ($(window).width() * 0.45) * (1/2)});
    });

}

</SCRIPT>

<!--<div class="error-box" style="margin-bottom:1em;margin-right:1em;margin-left:1em;padding:1em;">
The CyVerse Data Store will be unavailable on Tuesday, January 31st from 8:00am to 5:00pm MST preventing data import into CoGe. Check your local timezone <a href="https://goo.gl/mVBHZr" target="_blank">here</a>.
</div>-->

<!-- <div class="info-box" style="margin-bottom:1.5em;margin-right:1em;margin-left:1em;padding:1em;">
Please take a moment to fill out the <b>Future Directions Survey</b> (only 4 questions!) and help guide CoGe's future development: <a href="http://goo.gl/nizYYz" target="_blank">http://goo.gl/nizYYz</a>
</div> -->

<TMPL_IF NAME="INTRO">
<div id="stats">
    <ul class="horizontal bold center info" style="font-size:1.1em;">
        <li>Organisms: <span style="color:green"><TMPL_VAR NAME="ORG_COUNT"></span></li>
        <li>Genomes: <span style="color:green"><TMPL_VAR NAME="GEN_COUNT"></span></li>
        <li>Features: <span style="color:green"><TMPL_VAR NAME="FEAT_COUNT"></span></li>
        <!--<li>Annotations: <span style="color:green"><TMPL_VAR NAME="ANNOT_COUNT"></span></li>-->
        <li>Experiments: <span style="color:green"><TMPL_VAR NAME="EXP_COUNT"></span></li>
    </ul>
</div>

<div class="wrapper">
    <div id="intro">
        <div class="coge-section-lg">
            <h3>New to CoGe?</h3>
            <div class="text">
            CoGe is a platform for performing Comparative Genomics research.  It provides an open-ended network of interconnected tools to manage, analyze, and visualize next-gen data.
            </div>
            <br>
            <ul class="horizontal">
                <li>
                    <a href="https://genomevolution.org/wiki/index.php/New_to_CoGe">Get started</a>
                </li>
                <li>
                    <a href="https://genomevolution.org/wiki/index.php/How_to_get_a_CoGe_account">Create an Account</a>
                </li>
                <li>
                    <a href="https://genomevolution.org/wiki/index.php/Tutorials">Tutorials</a>
                </li>
                <li>
                    <a href="https://genomevolution.org/wiki">Documentation</a>
                </li>
                <li>
                    <a href="https://genomevolution.org/wiki/index.php/FAQs">FAQ</a>
                </li>
            </ul>
        </div>

        <div id="tools" class="coge-section-lg text">
            <h3>Tools</h3>
        </div>
<script>
    [
        {
            name: 'OrganismView',
            description: 'Search for organisms and get an overview of their genomic make-up.',
            docs: 'OrganismView',
            example: 'OrganismView.pl?org_name=W3110',
            img: 'picts/OrganismView.svg',
            url: 'OrganismView.pl'
        },
        {
            name: 'EPIC-CoGe',
            description: 'Visualize genomes and experiments using a dynamic, interactive genome browser.',
            docs: 'EPIC-CoGe',
            example: 'GenomeView.pl?gid=16911',
            img: 'picts/GenomeView.svg',
            url: 'GenomeView.pl'
        },
        {
            name: 'CoGeBlast',
            description: 'Blast sequences against any number of organisms in CoGe.',
            docs: 'CoGeBlast',
            example: 'CoGeBlast.pl?dsgid=3068;fid=40603528',
            img: 'picts/CoGeBlast.svg',
            url: 'CoGeBlast.pl'
        },
        {
            name: 'SynMap',
            description: 'Compare any two genomes to identify regions of synteny.',
            docs: 'SynMap',
            example: 'SynMap.pl?dsgid1=3068;dsgid2=8;D=20;g=10;A=5;w=0;b=1;ft1=1;ft2=1;dt=geneorder;ks=1;autogo=1',
            img: 'picts/SynMap.svg',
            url: 'SynMap.pl'
        },
        {
            name: 'SynMap3D',
            description: 'Compare any three genomes to identify regions of synteny.',
            docs: 'SynMap3D',
            example: 'SynMap3D.pl?x_gid=25571;y_gid=11691;z_gid=9642;min_syn=1;min_len=10000;sort=name',
            img: 'picts/SynMap3d.svg',
            url: 'SynMap3D.pl'
        },
        {
            name: 'SynFind',
            description: 'Search CoGe\'s annotation database for homologs.',
            example: 'SynFind.pl?dsgid=3068;fid=40603528;run=1',
            img: 'picts/SynFind.svg',
            url: 'SynFind.pl'
        },
    	{
            name: 'GEvo',
            description: 'Compare sequences and genomic regions to discover patterns of genome evolution.',
            docs: 'SynFind',
            example: 'GEvo.pl?prog=blastz;accn1=at1g07300;fid1=4091274;dsid1=556;chr1=1;dr1up=20000;dr1down=20000;gbstart1=1;gblength1=772;accn2=at2g29640;fid2=4113333;dsid2=557;chr2=2;dr2up=20000;dr2down=20000;gbstart2=1;rev2=1;num_seqs=2;autogo=1',
            img: 'picts/GEvo.svg',
            url: 'GEvo.pl'
        },
        {
    	    name: 'Load Genome',
    	    description: 'Load your own genome from NCBI or a FASTA file.',
            docs: 'LoadGenome',
    	    img: 'picts/LoadGenome.svg',
            url: 'LoadGenome.pl'
    	},
        {
    	    name: 'Load Experiment (LoadExp+)',
    	    description: 'Load experimental data from various standard input formats (such as BED, WIG, BAM, and FASTQ) and run downstream analyses including read mapping, expression measurement, and SNP identification.',
            docs: 'LoadExp%2B',
    	    img: 'picts/LoadExperiment.svg',
            url: 'LoadExperiment.pl'
    	}
    ].forEach(function(tool) {
        var div = $('<div class="coge-summary"></div>').appendTo($('#tools'));
        $('<a href="' + tool.url + '" class="l"><img src="' + tool.img + '" style="width:3em;height:3em;"></a>').appendTo(div);
        var body = $('<div class="coge-summary-body"></div>').appendTo(div);
        $('<h4 class="coge-summary-heading"><a href="' + tool.url + '">' + tool.name + '</a></h4>').appendTo(body);
        $('<div style="padding-left:0">' + tool.description + '</div>').appendTo(body);
        if (tool.example) {
            $('<a href="' + tool.example + '">Example</a>').appendTo(body);
            if (tool.docs)
                body.append(document.createTextNode(' - '));
        }
        if (tool.docs)
            $('<a href="https://genomevolution.org/wiki/index.php/' + tool.docs + '" target="_blank">Documentation</a>').appendTo(body);
    });
</script>
        <div class="coge-section-lg">
            <h3>Recently Added Public Genomes <small>(<a href="#" onclick="show_genomes(window.event)">more</a>)</small></h3>
            <div id="latest-genomes" class="padded small">
            </div>
        </div>
    </div>

    <div id="highlights">
        <div id="wikifeed" class="coge-section-lg text">
            <h3>Latest News</h3>
        </div>
        <div class="coge-section-lg">
            <h3>Worldwide Usage</h3>
	    	<!--<iframe src="https://www.google.com/maps/d/embed?mid=zTAag14VR8dY.krU3JWBs4l5E" width="100%" height="250" frameborder="0" style="border:0"></iframe>-->
            <div id="usage-map" style="text-align: center; margin-left: auto; margin-right: auto;"></div>
	    </div>
        <div class="coge-section-lg">
            <h3>Tutorials</h3>
            <div id="crossfade"></div>
        </div>
    </div>
    </TMPL_IF>
</div>

<div id="genome_dialog" style="display: none;" class="coge-section">
    <label for="limit">Number returned:</label>
    <input id="limit" class="backbox" type="textbox" size="3" value="10">
    <span class='coge-button' onClick="show_genomes(window.event)">Go</span>
    <br>
    <br>
    <div id="genomes-list" style="max-height: 500px;" class="coge-scroll coge-striped-even"></div>
</div>
